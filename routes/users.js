const express = require('express');
const router = express.Router();
const usersController = require('../controllers/userController');

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *         - userId
 *         - name
 *         - email
 *         - username
 *       properties:
 *         userId:
 *           type: string
 *           description: The unique ID generated by the IAM service
 *         username:
 *           type: string
 *           description: Unique username for the user
 *         name:
 *           type: string
 *         email:
 *           type: string
 *         lifestyle:
 *           type: array
 *           items:
 *             type: string
 *         preferences:
 *           type: array
 *           items:
 *             type: string
 *         budget:
 *           type: number
 *         location:
 *           type: string
 *         gender:
 *           type: string
 *           enum: [male, female, non-binary, other]
 */

/**
 * @swagger
 * /api/users:
 *   post:
 *     summary: Create a new user (userId generated externally)
 *     tags: [Users]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     responses:
 *       201:
 *         description: User created successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       400:
 *         description: Bad request - missing or invalid fields
 *       500:
 *         description: Internal server error
 */
router.post('/', usersController.createUser);

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Get all users (with optional filters)
 *     tags: [Users]
 *     parameters:
 *       - in: query
 *         name: lifestyle
 *         schema:
 *           type: string
 *         description: Comma-separated lifestyle tags
 *       - in: query
 *         name: preferences
 *         schema:
 *           type: string
 *         description: Comma-separated preferences
 *       - in: query
 *         name: location
 *         schema:
 *           type: string
 *       - in: query
 *         name: gender
 *         schema:
 *           type: string
 *           enum: [male, female, non-binary, other]
 *       - in: query
 *         name: matchMode
 *         schema:
 *           type: string
 *           enum: [any, all]
 *         description: Match logic for array fields
 *       - in: query
 *         name: minBudget
 *         schema:
 *           type: number
 *       - in: query
 *         name: maxBudget
 *         schema:
 *           type: number
 *     responses:
 *       200:
 *         description: List of users
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 */
router.get('/', usersController.getUsers);

/**
 * @swagger
 * /api/users/{id}:
 *   put:
 *     summary: Update a user by DB ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     responses:
 *       200:
 *         description: User updated
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 */
router.put('/:id', usersController.updateUser);

/**
 * @swagger
 * /api/users/{id}:
 *   delete:
 *     summary: Delete a user by DB ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User deleted successfully
 */
router.delete('/:id', usersController.deleteUser);

/**
 * @swagger
 * /api/users/{id}:
 *   get:
 *     summary: Get a user by DB ID
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: A single user object
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       404:
 *         description: User not found
 */
router.get('/:id', usersController.getUserById);

/**
 * @swagger
 * /api/users/{userId}:
 *   get:
 *     summary: Get a user by IAM userId
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: User found
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       404:
 *         description: User not found
 */
router.get('/:userId', usersController.getUserByUserId);

/**
 * @swagger
 * /api/users/{userId}:
 *   put:
 *     summary: Update a user by IAM userId
 *     tags: [Users]
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/User'
 *     responses:
 *       200:
 *         description: User updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *       404:
 *         description: User not found
 *       500:
 *         description: Server error
 */
router.put('/:userId', usersController.updateUser);

/**
 * @swagger
 * /api/users/search:
 *   get:
 *     summary: Search users by username (partial match)
 *     tags: [Users]
 *     parameters:
 *       - in: query
 *         name: username
 *         required: true
 *         schema:
 *           type: string
 *         description: Case-insensitive partial username match
 *     responses:
 *       200:
 *         description: Matching users found
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/User'
 *       404:
 *         description: No users found
 */
router.get('/search', usersController.searchByUsername);

module.exports = router;
